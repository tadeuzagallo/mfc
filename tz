#!/usr/bin/env coffee

global.tz =
	_mod: new Object
	_attr: new Object
	_params: new Object
	_defaults:
		_before_action: 'beforeAction'
		_controller: 'Main'
		_action: 'index'
		_extension: 'html'
		_host: 'localhost'
		_port: 4000
		_internal: '_tz_internal_' + Math.round do new Date().getTime * do Math.random
		_debug: yes
		_debug_level: 'high'
		_base_url: ''
	init: ->
		host = @attr 'host'
		port = @attr 'port'
		cluster = @mod 'cluster'
		http = @mod 'http'
		fs = @mod 'fs'

		if cluster.isMaster
			do cluster.fork for [1..2]
			cluster.on 'death', => do cluster.fork
		else
			@log "Server runing on #{host}:#{port}"
			server = do http.createServer
			server.listen 4000
			server.on 'request', (req, res)=> 
				return if req.url is '/favicon.ico'
				try
					process.on 'uncaughtException', (err)->
						@log 'uncaughtException', err
					
					do @mod('req', req, yes).mod('res', res, yes)._restore()._set_post().match
				catch err
				 	@log('Can\'t start', err)
	_set_post: ->
		req = @mod 'req'
		if do req.method.toUpperCase in ['POST', 'PUT']
			data = ''
			req.on 'data', (chunk)->
				data += do chunk.toString
			req.on 'end', =>
				querystring = @mod 'querystring'
				for name, value of querystring.parse data
					@params name, value
		@
	_restore:  ->
		@_params = new Object
		@_attr = new Object
		req = @mod 'req'
		@
	_get: (key, name, value, override, _default)->
		key = @_private key
		name = @_private name
		if (override  or not @[key][name]) and (value or _default?)
			if not value and _default and (match = _default.match /^eval:(.*)$/)
				_default = eval match[1]
			@[key][name] = value or _default
		return if value? then @ else (@[key][name] or (if key is '_attr' then @_defaults[name] else undefined))
	rm: (key, name)->
		key = @_private key
		name = @_private name
		delete @[key][name]
		@
	mod: (name, value, override = no, _default = "eval:require('#{name}')")->
		@_get 'mod', name, value, override, _default
	attr: (name, value, override = yes, _default)->
		@_get 'attr', name, value, override, _default
	params: (name, value, override = yes, _default = '')->
		unless name
			_obj = {}
			_obj[@_public(name)] = value for name, value of @_params
			return _obj
		@_get 'params', name, value, override, _default
	match: ->
			path = @mod 'path'
			req = @mod 'req'

			@log "URL #{req.url} requested!"
			url = req.url.split('?')[0]
			_urlArray = url.split '/'
			urlArray = new Array
			(urlArray.push v if v) for v in _urlArray

			unless urlArray.length
				return do @route
			if urlArray[0] is 'static'
				path = require 'path'
				filepath = path.join @attr('publicPath'), path.join.apply this, urlArray[1...]
				return @handleStatic filepath
			
			@attr 'controller', do urlArray.shift
			@attr('action', do urlArray.shift) if urlArray.length
			@params(do urlArray.shift, do urlArray.shifts) while urlArray.length
			do @route
	route: ->
		@log "Started routing"
		try
			controller = require "#{@attr 'controllersFolder'}/#{@attr 'controller'}"
			beforeAction = @attr 'beforeAction'
			do controller[beforeAction] if controller[beforeAction]
			do controller[@attr 'action']
			@log "Routed!"
		catch err
			@log("Failed routing", err)._404 err

	handleStatic: (filename)->
		try
			res = @mod 'res'
			fs = @mod 'fs'
			
			s = fs.createReadStream filename
			s.on 'error', -> 
				res.writeHead 404
				do res.end
			s.once 'fd', => res.writeHead 200
			s.pipe(res)
		catch err
			@_404 err


	render: (layout, view, params = {})->
		try
			res = @mod 'res'
			if (arguments.length is 2 and arguments[1] instanceof Object) or arguments.length is 1
				@writeCode 200, res, 'text/plain'
				view or= {}
				return res.end new Function('params', "with(params){a = '#{layout}';}return a;").call view, view
			fs = @mod 'fs'
			fs.readFile @view(view), (err, content)=>
				throw err if err
				content = @template content, params
				@writeCode 200, res
				if layout
					return fs.readFile @layout(layout), (err, _content)=>
						throw err if err
						params.content = content
						res.end @template(_content, params), 'utf8'
				res.end content, 'utf8'
			@log "Renedered!"
		catch err
			@log("Failed rendering...", err)._500 err
	template: (content, params)->
		try
			content += ''
			template = "with(params){var #{@attr 'internal'} = [];";
			c = @mod('coffee-script').compile
			r = /<%(=)?(#)?([\s\S]*)/g
			holder = no
			specialChars = 
				'\\n': '\\n'
				'\\t': '\\t'
			for k,v of specialChars
				content = content.replace new RegExp(k, 'g'), v
			for part in content.split '%>'
				if (index = part.indexOf('<%')) isnt -1
					template += "#{@attr 'internal'}.push('#{part.substr 0, index}');"
					part.replace r, (match, print,comment, code, index, all)=>
						code = do code.trim
						if print
							code = do c(code).trim
							code = code.substr(0, code.length - 1) if code.charAt(code.length-1) is ';'
							template += "#{@attr 'internal'}.push(#{code});"
						else
							if code is 'end'
								if holder then code = holder else code = '}'
								holder = no
							else if code.charAt(code.length-1) is ':'
								_fn = (match, code, index, all) ->
									holder = code
									''
								try
									code = c(code.substr(0, code.length-1) + "\n\t#{@attr 'internal'}\n\t#{@attr 'internal'}").replace(new RegExp("#{@attr 'internal'};\\s*#{@attr 'internal'};([\\s\\S.]*)"), _fn)
								catch err
									code = "}#{code.substr(0, code.length-1)}{"
							else 
								code = c(code).replace /\(function\(\)\s*{([\s\S]*)}\s*\).call\(this\)\s*;/, '$1'
							code = code.replace /'/g, '\\\''
							if comment then template += " <!--#{code}-->" else template += " #{code} "
				else
					template += "#{@attr 'internal'}.push('#{part.replace /'/g, '\\\''}');"
			(new Function 'params', template + " return #{@attr 'internal'}.join('');}").call @, params
		catch err
			@_500 err
	view: (view)->
		"#{@attr 'viewsFolder'}/#{@attr 'controller'}/#{view}.#{@attr 'extension'}"
	layout: (layout)->
		"#{@attr 'layoutsFolder'}/#{layout}.#{@attr 'extension'}"
	writeCode: (code, res = @mod 'res', contentType = 'text/html')->
		res.writeHead code, {'Content-Type': contentType}
	log: (txt, err)->
		if @attr 'debug'
			console.log "#{do (new Date).toString}: #{txt}" if @attr('debugLevel') is 'high'
			console.log err.stack if err
		@
	_404: (err, res = @mod 'res')->
		res.writeHead 404
		res.end "<html><head><title>404</title></head><body><center><h2>The page that you are looking for does not exist.</h2>" + (if @attr 'debug' then "<pre style='text-align:left;'>#{err.stack}</pre>" else "") + "</center></body><html>"
	_500: (err, res = @mod 'res')->
		@writeCode 500, res
		res.end "<html><head><title>500</title></head><body><center><h2>Internal server error</h2>" + (if @attr 'debug' then "<pre style='text-align:left;'>#{err.stack}</pre>" else "") + "</center></body></html>"
	_private: (prop)->
		do ('_' + prop.replace /([A-Z]+)/g, '_$1').toLowerCase
	_public: (prop)->
		prop.substr(1).replace /_([a-z])/g, (match, letter, index)-> do letter.toUpperCase
	__set_default: (name, value)->
		name = @_private name
		@_defaults[name] = value
		@
	url: (obj = {})->
		if obj.controller
			url = "#{@attr 'baseUrl'}/#{obj.controller}/#{obj.action or 'index'}/" 
			url += "#{key}/" + (if value then "#{value}/" else "") for key,value of obj.params if obj.params
			url
		else if obj.type
			return "#{@attr('staticUrl') or @attr('baseUrl') + '/static'}/#{obj.type}/#{obj.file}"
	

config = require "#{__dirname}/config"
tz.__set_default('basePath', "#{__dirname}").__set_default('publicPath', "#{__dirname}/public").__set_default('controllersFolder', "#{__dirname}/app/controllers").__set_default('viewsFolder', "#{__dirname}/app/views").__set_default('layoutsFolder', "#{__dirname}/app/views/layouts")
@__set_default(key, value) for key,value of config
do tz.init